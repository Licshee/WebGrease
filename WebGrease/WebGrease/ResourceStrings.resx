<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigurationFileParseError" xml:space="preserve">
    <value>There was an error loading the configuration file. Please double check that the file is valid XML and try again.</value>
  </data>
  <data name="DuplicateFoundFormat" xml:space="preserve">
    <value>Duplicate found: {0} {1} {2}</value>
  </data>
  <data name="ErrorsInFileFormat" xml:space="preserve">
    <value>Errors in {0}:</value>
  </data>
  <data name="GeneralErrorMessage" xml:space="preserve">
    <value>An error was encountered while processing your request. Please verify your inputs and try again.</value>
  </data>
  <data name="InvalidBundlingOutputFile" xml:space="preserve">
    <value>"{0}" is not a valid file name for bundling output.</value>
  </data>
  <data name="MoreThan256Colours" xml:space="preserve">
    <value>More than 256 colors found</value>
  </data>
  <data name="MultipleSwitches" xml:space="preserve">
    <value>Only 1 operation switch may be set per execution run of wg.exe.</value>
  </data>
  <data name="NoFilesProcessed" xml:space="preserve">
    <value>No files processed.</value>
  </data>
  <data name="SemiTransparencyFound" xml:space="preserve">
    <value>Semitransparency found</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage:
wg.exe &lt;operation switch&gt; -c:&lt;configFile&gt; -type:&lt;configType&gt; [-in:&lt;basePath&gt;]
OR 
wg.exe &lt;operation switch&gt; -in:&lt;inputPath&gt; -out:&lt;outputPath&gt;

Switches (only 1 may be used at a time)

	-m : Minifies files in the set.

	-v : Validates the code in the JavaScript files.
	
	-s : Sprites any background images in css files. 
	
	-a : Auto names output files (if the -out parameter is a Directory and not a file).
	
	-b : Bundles all input files into a single output file. Required if the -out parameter is a file.

Parameters

  -c : Specify a config file. All other parameters (except type) are ignored if a a config file is specified.

  -type: specifies a config type name to use for settings.
  
  -in : Input path. This can be a single file or a folder. If it is a folder, all files within will be processed. When used with a configuration file, this parameter serves as a base path applied to any relative input paths in the configuration file.

  -out : Output path. This can be a folder or a single file. If this is a single file and the input is a folder, the -b switch must be set to enable bundling. When used with a configuration file, this parameter serves as a base path applied to all relative output paths in the configuration file.

  -images : Path containing images for CSS spriting. Required when the -s switch is set.</value>
  </data>
  <data name="BundlingFiles" xml:space="preserve">
    <value>Bundling files.</value>
  </data>
  <data name="ThereWereErrorsWhileBundlingFiles" xml:space="preserve">
    <value>There were errors while bundling files.</value>
  </data>
  <data name="ResolvingTokensAndPerformingLocalization" xml:space="preserve">
    <value>Resolving tokens and performing localization.</value>
  </data>
  <data name="MinifyingCssFilesAndSpritingBackgroundImages" xml:space="preserve">
    <value>Minifying css files, and spriting background images.</value>
  </data>
  <data name="ThereWereErrorsWhileMinifyingTheCssFiles" xml:space="preserve">
    <value>There were errors while minifying the css files.</value>
  </data>
  <data name="ThereWereErrorsWhileApplyingCssresources" xml:space="preserve">
    <value>There were errors while applying resources to the css files.</value>
  </data>
  <data name="FileHasherActivityErrorOccurred" xml:space="preserve">
    <value>An error occurred while executing the file hasher activity.</value>
  </data>
  <data name="FileHasheActivityCouldNotLocateDirectory" xml:space="preserve">
    <value>The file hasher activity could not locate the source directory at {0}</value>
  </data>
  <data name="PreprocessingInitializeEnd" xml:space="preserve">
    <value>Preprocessing initialize end;</value>
  </data>
  <data name="PreprocessingInitializeStart" xml:space="preserve">
    <value>preprocessing initialize start; from plugin path: {0}</value>
  </data>
  <data name="PreprocessingCouldNotFindThePluginPath" xml:space="preserve">
    <value>Could not find the plugin path {0}</value>
  </data>
  <data name="PreprocessingPluginPath" xml:space="preserve">
    <value>preprocessing plugin path: {0}</value>
  </data>
  <data name="PreprocessingLoadingError" xml:space="preserve">
    <value>Error occurred while loading preprocessors.</value>
  </data>
  <data name="PreprocessingEngineFound" xml:space="preserve">
    <value>preprocessing engine found: {0}</value>
  </data>
  <data name="ResourceResolverDuplicateKeyExceptionMessage" xml:space="preserve">
    <value>Duplicate key: '{0}' found in the resx file '{1}'. Same key may exist with different delimiters in the resx file.</value>
  </data>
  <data name="ResourcePivotActivityError" xml:space="preserve">
    <value>ResourcePivotActivity - Error occured while executing the expand resources activity</value>
  </data>
  <data name="ResourcePivotActivityDuplicateKeysError" xml:space="preserve">
    <value>ResourcePivotActivity - {0} has more than one value assigned. Only one value per key name is allowed in libraries and features. Resource key overrides are allowed at the product level only.</value>
  </data>
  <data name="OverrideFileLoadErrorMessage" xml:space="preserve">
    <value>Error occurred while loading the WebGrease override xml file: {0}</value>
  </data>
  <data name="SafeLockFailedMessage" xml:space="preserve">
    <value>Safe.Lock wasn't able to acquire a lock in {0}ms</value>
  </data>
</root>