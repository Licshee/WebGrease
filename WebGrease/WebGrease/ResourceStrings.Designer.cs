//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebGrease {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ResourceStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ResourceStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WebGrease.ResourceStrings", typeof(ResourceStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bundling files..
        /// </summary>
        internal static string BundlingFiles {
            get {
                return ResourceManager.GetString("BundlingFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error loading the configuration file. Please double check that the file is valid XML and try again..
        /// </summary>
        internal static string ConfigurationFileParseError {
            get {
                return ResourceManager.GetString("ConfigurationFileParseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate found: {0} {1} {2}.
        /// </summary>
        internal static string DuplicateFoundFormat {
            get {
                return ResourceManager.GetString("DuplicateFoundFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Errors in {0}:.
        /// </summary>
        internal static string ErrorsInFileFormat {
            get {
                return ResourceManager.GetString("ErrorsInFileFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file hasher activity could not locate the source directory at {0}.
        /// </summary>
        internal static string FileHasheActivityCouldNotLocateDirectory {
            get {
                return ResourceManager.GetString("FileHasheActivityCouldNotLocateDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while executing the file hasher activity..
        /// </summary>
        internal static string FileHasherActivityErrorOccurred {
            get {
                return ResourceManager.GetString("FileHasherActivityErrorOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error was encountered while processing your request. Please verify your inputs and try again..
        /// </summary>
        internal static string GeneralErrorMessage {
            get {
                return ResourceManager.GetString("GeneralErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0}&quot; is not a valid file name for bundling output..
        /// </summary>
        internal static string InvalidBundlingOutputFile {
            get {
                return ResourceManager.GetString("InvalidBundlingOutputFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minifying css files, and spriting background images..
        /// </summary>
        internal static string MinifyingCssFilesAndSpritingBackgroundImages {
            get {
                return ResourceManager.GetString("MinifyingCssFilesAndSpritingBackgroundImages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than 256 colors found.
        /// </summary>
        internal static string MoreThan256Colours {
            get {
                return ResourceManager.GetString("MoreThan256Colours", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only 1 operation switch may be set per execution run of wg.exe..
        /// </summary>
        internal static string MultipleSwitches {
            get {
                return ResourceManager.GetString("MultipleSwitches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No files processed..
        /// </summary>
        internal static string NoFilesProcessed {
            get {
                return ResourceManager.GetString("NoFilesProcessed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred while loading the WebGrease override xml file: {0}.
        /// </summary>
        internal static string OverrideFileLoadErrorMessage {
            get {
                return ResourceManager.GetString("OverrideFileLoadErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the plugin path {0}.
        /// </summary>
        internal static string PreprocessingCouldNotFindThePluginPath {
            get {
                return ResourceManager.GetString("PreprocessingCouldNotFindThePluginPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to preprocessing engine found: {0}.
        /// </summary>
        internal static string PreprocessingEngineFound {
            get {
                return ResourceManager.GetString("PreprocessingEngineFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preprocessing initialize end;.
        /// </summary>
        internal static string PreprocessingInitializeEnd {
            get {
                return ResourceManager.GetString("PreprocessingInitializeEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to preprocessing initialize start; from plugin path: {0}.
        /// </summary>
        internal static string PreprocessingInitializeStart {
            get {
                return ResourceManager.GetString("PreprocessingInitializeStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred while loading preprocessors..
        /// </summary>
        internal static string PreprocessingLoadingError {
            get {
                return ResourceManager.GetString("PreprocessingLoadingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to preprocessing plugin path: {0}.
        /// </summary>
        internal static string PreprocessingPluginPath {
            get {
                return ResourceManager.GetString("PreprocessingPluginPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolving tokens and performing localization..
        /// </summary>
        internal static string ResolvingTokensAndPerformingLocalization {
            get {
                return ResourceManager.GetString("ResolvingTokensAndPerformingLocalization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ResourcePivotActivity - {0} has more than one value assigned. Only one value per key name is allowed in libraries and features. Resource key overrides are allowed at the product level only..
        /// </summary>
        internal static string ResourcePivotActivityDuplicateKeysError {
            get {
                return ResourceManager.GetString("ResourcePivotActivityDuplicateKeysError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ResourcePivotActivity - Error occured while executing the expand resources activity.
        /// </summary>
        internal static string ResourcePivotActivityError {
            get {
                return ResourceManager.GetString("ResourcePivotActivityError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate key: &apos;{0}&apos; found in the resx file &apos;{1}&apos;. Same key may exist with different delimiters in the resx file..
        /// </summary>
        internal static string ResourceResolverDuplicateKeyExceptionMessage {
            get {
                return ResourceManager.GetString("ResourceResolverDuplicateKeyExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Safe.Lock wasn&apos;t able to acquire a lock in {0}ms.
        /// </summary>
        internal static string SafeLockFailedMessage {
            get {
                return ResourceManager.GetString("SafeLockFailedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Semitransparency found.
        /// </summary>
        internal static string SemiTransparencyFound {
            get {
                return ResourceManager.GetString("SemiTransparencyFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were errors while applying resources to the css files..
        /// </summary>
        internal static string ThereWereErrorsWhileApplyingCssresources {
            get {
                return ResourceManager.GetString("ThereWereErrorsWhileApplyingCssresources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were errors while bundling files..
        /// </summary>
        internal static string ThereWereErrorsWhileBundlingFiles {
            get {
                return ResourceManager.GetString("ThereWereErrorsWhileBundlingFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were errors while minifying the css files..
        /// </summary>
        internal static string ThereWereErrorsWhileMinifyingTheCssFiles {
            get {
                return ResourceManager.GetString("ThereWereErrorsWhileMinifyingTheCssFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:
        ///wg.exe &lt;operation switch&gt; -c:&lt;configFile&gt; -type:&lt;configType&gt; [-in:&lt;basePath&gt;]
        ///OR 
        ///wg.exe &lt;operation switch&gt; -in:&lt;inputPath&gt; -out:&lt;outputPath&gt;
        ///
        ///Switches (only 1 may be used at a time)
        ///
        ///	-m : Minifies files in the set.
        ///
        ///	-v : Validates the code in the JavaScript files.
        ///	
        ///	-s : Sprites any background images in css files. 
        ///	
        ///	-a : Auto names output files (if the -out parameter is a Directory and not a file).
        ///	
        ///	-b : Bundles all input files into a single output file. Required if the -out pa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Usage {
            get {
                return ResourceManager.GetString("Usage", resourceCulture);
            }
        }
    }
}
